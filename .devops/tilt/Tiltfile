# -*- mode: python -*-

# Load required extensions
v1alpha1.extension_repo(
    name = "default",
    url = "https://github.com/fxnlabs/tilt-extensions",
)

load("utils.Tiltfile", "detect_gpu_backend", "format_setup_instructions", "go_files", "validate_config_files")

_main_dir = os.path.join(
    os.getcwd(),
    "..",
    "..",
)

_go_files = go_files(_main_dir)

# Common labels for grouping resources
_labels = ["node"]

# Get configuration from environment variables (set by parent Tiltfile)
_config_file = os.environ.get("FXN_NODE_CONFIG_FILE", "config.yaml")

_model_backend_file = os.environ.get("FXN_NODE_MODEL_BACKEND_FILE", "model_backend.yaml")

_requested_gpu_backend = os.environ.get("FXN_NODE_GPU_BACKEND", "auto")

# Validate configuration files
_missing_files = validate_config_files(_main_dir, _config_file, _model_backend_file)

if _missing_files:
    _instructions = format_setup_instructions(_missing_files, _main_dir)
    fail(_instructions)

# Detect GPU backend
_gpu_backend = detect_gpu_backend(_requested_gpu_backend)

print("ðŸš€ Function Node GPU backend: %s" % _gpu_backend)

# Install dependencies
local_resource(
    "node:deps",
    cmd = "go mod download",
    dir = _main_dir,
    labels = _labels,
    deps = [
        "go.mod",
        "go.sum",
    ],
)

# Run linter
local_resource(
    "node:lint",
    auto_init = False,  # Only run when triggered
    cmd = "golangci-lint run",
    dir = _main_dir,
    labels = _labels,
    resource_deps = ["node:deps"],
    trigger_mode = TRIGGER_MODE_MANUAL,
    deps = _go_files,
)

# Run tests with coverage
local_resource(
    "node:test",
    auto_init = False,  # Only run when triggered
    cmd = "go test -v -race -coverprofile=coverage.out ./...",
    dir = _main_dir,
    labels = _labels,
    resource_deps = ["node:deps"],
    trigger_mode = TRIGGER_MODE_MANUAL,
    deps = _go_files,
)

# Build GPU backend if needed
if _gpu_backend == "cuda":
    local_resource(
        "node:cuda-compile",
        cmd = "make cuda-compile",
        dir = _main_dir,
        labels = _labels,
        deps = str(local(
            "find %s/cuda -name '*.cu' -o -name '*.h' -o -name 'Makefile' 2>/dev/null || true" % _main_dir,
            echo_off = True,
            quiet = True,
        )).strip().splitlines() or [],
    )

    _build_deps = ["node:deps", "node:cuda-compile"]
    _build_cmd = "make cuda"
elif _gpu_backend == "metal":
    local_resource(
        "node:metal-compile",
        cmd = "make metal-compile",
        dir = _main_dir,
        labels = _labels,
        deps = str(local(
            "find %s/metal -name '*.metal' -o -name '*.h' -o -name '*.m' -o -name 'Makefile' 2>/dev/null || true" % _main_dir,
            echo_off = True,
            quiet = True,
        )).strip().splitlines() or [],
    )

    _build_deps = ["node:deps", "node:metal-compile"]
    _build_cmd = "make metal"
else:
    _build_deps = ["node:deps"]
    _build_cmd = "make cpu"

# Build the project
local_resource(
    "node:build",
    cmd = _build_cmd,
    dir = _main_dir,
    labels = _labels,
    resource_deps = _build_deps,
    deps = _go_files,
)

# Manual trigger for rebuilding with different GPU backend
local_resource(
    "node:rebuild-cuda",
    auto_init = False,
    cmd = "make cuda",
    dir = _main_dir,
    labels = _labels,
    resource_deps = ["node:deps"],
    trigger_mode = TRIGGER_MODE_MANUAL,
    deps = _go_files,
)

local_resource(
    "node:rebuild-metal",
    auto_init = False,
    cmd = "make metal",
    dir = _main_dir,
    labels = _labels,
    resource_deps = ["node:deps"],
    trigger_mode = TRIGGER_MODE_MANUAL,
    deps = _go_files,
)

local_resource(
    "node:rebuild-cpu",
    auto_init = False,
    cmd = "make cpu",
    dir = _main_dir,
    labels = _labels,
    resource_deps = ["node:deps"],
    trigger_mode = TRIGGER_MODE_MANUAL,
    deps = _go_files,
)

# Read configuration for port
_cfg = read_yaml(os.path.join(_main_dir, _config_file))

_server_port = _cfg.get("node", {}).get("listenPort", 8080)

# Run the development server
local_resource(
    "node:start",
    auto_init = False,
    labels = _labels,
    links = [link(
        "http://localhost:{_server_port}".format(
            _server_port = _server_port,
        ),
        "Function Node API",
    )],
    readiness_probe = probe(
        http_get = http_get_action(
            path = "/health",
            port = _server_port,
        ),
        initial_delay_secs = 5,
        period_secs = 10,
        timeout_secs = 5,
    ),
    resource_deps = ["node:build"],
    serve_cmd = "./fxn --home . start",
    serve_dir = _main_dir,
    trigger_mode = TRIGGER_MODE_MANUAL,
    deps = [
        os.path.join(_main_dir, "fxn"),
        os.path.join(_main_dir, _config_file),
        os.path.join(_main_dir, _model_backend_file),
    ],
)

# Clean up resources when Tilt is shut down
if config.tilt_subcommand == "down":
    local("make clean", dir = _main_dir, echo_off = True, quiet = True)

