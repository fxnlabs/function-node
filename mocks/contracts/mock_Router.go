// Code generated by mockery v2.43.2. DO NOT EDIT.

package contracts

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// MockRouter is an autogenerated mock type for the Router type
type MockRouter struct {
	mock.Mock
}

type MockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouter) EXPECT() *MockRouter_Expecter {
	return &MockRouter_Expecter{mock: &_m.Mock}
}

// GetGatewayRegistryAddress provides a mock function with given fields:
func (_m *MockRouter) GetGatewayRegistryAddress() (common.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayRegistryAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRouter_GetGatewayRegistryAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayRegistryAddress'
type MockRouter_GetGatewayRegistryAddress_Call struct {
	*mock.Call
}

// GetGatewayRegistryAddress is a helper method to define mock.On call
func (_e *MockRouter_Expecter) GetGatewayRegistryAddress() *MockRouter_GetGatewayRegistryAddress_Call {
	return &MockRouter_GetGatewayRegistryAddress_Call{Call: _e.mock.On("GetGatewayRegistryAddress")}
}

func (_c *MockRouter_GetGatewayRegistryAddress_Call) Run(run func()) *MockRouter_GetGatewayRegistryAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_GetGatewayRegistryAddress_Call) Return(_a0 common.Address, _a1 error) *MockRouter_GetGatewayRegistryAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRouter_GetGatewayRegistryAddress_Call) RunAndReturn(run func() (common.Address, error)) *MockRouter_GetGatewayRegistryAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderRegistryAddress provides a mock function with given fields:
func (_m *MockRouter) GetProviderRegistryAddress() (common.Address, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviderRegistryAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.Address, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRouter_GetProviderRegistryAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderRegistryAddress'
type MockRouter_GetProviderRegistryAddress_Call struct {
	*mock.Call
}

// GetProviderRegistryAddress is a helper method to define mock.On call
func (_e *MockRouter_Expecter) GetProviderRegistryAddress() *MockRouter_GetProviderRegistryAddress_Call {
	return &MockRouter_GetProviderRegistryAddress_Call{Call: _e.mock.On("GetProviderRegistryAddress")}
}

func (_c *MockRouter_GetProviderRegistryAddress_Call) Run(run func()) *MockRouter_GetProviderRegistryAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_GetProviderRegistryAddress_Call) Return(_a0 common.Address, _a1 error) *MockRouter_GetProviderRegistryAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRouter_GetProviderRegistryAddress_Call) RunAndReturn(run func() (common.Address, error)) *MockRouter_GetProviderRegistryAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRouter creates a new instance of MockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouter {
	mock := &MockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
